# -*- coding: utf-8 -*-
"""Adv. Python Lab_Manual M.Sc(CS/IT).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mkAqqfk4kxKaA_SLE5yIznI0oZt8yT4w

**Experiment 1:** Implementation of Advanced Data Structures in Python.

**Objective:** Implement and analyze sets, dictionaries, heaps, and graphs.

**Program:**
"""

# Sets and Dictionaries
my_set = {1, 2, 3, 4}
my_dict = {'a': 1, 'b': 2, 'c': 3}
print("Set Operations:", my_set)
print("Dictionary Operations:", my_dict)
# MinHeap and MaxHeap
import heapq
heap = []
heapq.heappush(heap, 10)
heapq.heappush(heap, 5)
heapq.heappush(heap, 15)
print("MinHeap:", [heapq.heappop(heap) for _ in range(len(heap))])
# Graph using adjacency list
graph = {
 'A': ['B', 'C'],
 'B': ['A', 'D'],
 'C': ['A', 'D'],
 'D': ['B', 'C']
}
print("Graph Representation:", graph)

"""**Experiment 2:** Algorithm Design and Analysis

**Program:**
"""

# Function to find the largest element in a list
def find_max(nums):
    # Check if the list is empty
    if not nums:
        return "List is empty"

    # Assume the first element is the largest
    max_num = nums[0]

    # Iterate through the list
    for num in nums:
        if num > max_num:
            max_num = num

    return max_num

# Input list
numbers = [12, 45, 78, 34, 23, 89, 67]
# Call the function and print the result
print("The largest number is:", find_max(numbers))

"""**Experiment 3: Time and Space Complexity Analysis**

**Program:**
"""

def find_max(nums):
    # Check if the list is empty
    if not nums:
        return "List is empty"

    # Assume the first element is the largest
    max_num = nums[0]

    # Iterate through the list
    for num in nums:
        if num > max_num:
            max_num = num

    return max_num

# Input list
numbers = [12, 45, 78, 34, 23, 89, 67]

# Call the function and print the result
print("The largest number is:", find_max(numbers))

"""**Experiment 4:** Object-Oriented Programming in Python

**Program:**
"""

# Parent class
class Animal:
    def __init__(self, name):
        self.name = name

    def sound(self):
        print("Animal makes a sound")

# Child class inheriting from Animal
class Dog(Animal):
    def sound(self):
        print(f"{self.name} barks")

# Child class inheriting from Animal
class Cat(Animal):
    def sound(self):
        print(f"{self.name} meows")

# Create objects of Dog and Cat
dog = Dog("Buddy")
cat = Cat("Whiskers")

# Call the sound method
dog.sound()
cat.sound()

"""**Experiment 5:** Design Patterns in Python

**Program:**



"""

class Singleton:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(Singleton, cls).__new__(cls)
            print("New instance created!")
        return cls._instance

# Create instances
obj1 = Singleton()
obj2 = Singleton()

# Check if they point to the same instance
print(obj1 == obj2)

"""**Experiment 6:** Functional Programming in Python

**Program:**
"""

# Experiment 6: Functional Programming in Python

from functools import reduce

# 1. Using map() to square a list of numbers
numbers = [1, 2, 3, 4, 5]
squared_numbers = list(map(lambda x: x**2, numbers))
print(f"Squared Numbers: {squared_numbers}")

# 2. Using filter() to get even numbers from a list
even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
print(f"Even Numbers: {even_numbers}")

# 3. Using reduce() to calculate the product of all numbers
product_of_numbers = reduce(lambda x, y: x * y, numbers)
print(f"Product of Numbers: {product_of_numbers}")

# 4. Higher-order function: Applying a function to a list
def apply_function(func, values):
    return [func(x) for x in values]

# Doubling each number
doubled_numbers = apply_function(lambda x: x * 2, numbers)
print(f"Doubled Numbers: {doubled_numbers}")

# 5. Using list comprehension with a lambda
squared_comprehension = [lambda x=x: x**2 for x in numbers]
squared_results = [func() for func in squared_comprehension]
print(f"Squared Numbers (List Comprehension): {squared_results}")

"""**Experiment 7:** Concurrency and Parallelism in Python

**Program:**
"""

import threading
import time

# Task to simulate
def print_numbers():
    for i in range(5):
        time.sleep(1)
        print(f"Number {i}")

# Create threads
thread1 = threading.Thread(target=print_numbers)
thread2 = threading.Thread(target=print_numbers)

# Start threads
thread1.start()
thread2.start()

# Wait for both threads to complete
thread1.join()
thread2.join()

print("Done with threading!")

"""**Experiment 8:** Database Connectivity in Python

**Program:**
"""

# Experiment: Database Connectivity in Python using SQLite
import sqlite3

# Connect to SQLite database (creates a new one if it doesn't exist)
connection = sqlite3.connect("student.db")

# Create a cursor object to interact with the database
cursor = connection.cursor()

# Create a table if it doesn't already exist
cursor.execute('''
    CREATE TABLE IF NOT EXISTS students (
        id INTEGER PRIMARY KEY,
        name TEXT,
        age INTEGER,
        grade TEXT
    )
''')

# Insert data into the table
cursor.execute("INSERT INTO students (name, age, grade) VALUES ('Yashoda', 20, 'A')")
cursor.execute("INSERT INTO students (name, age, grade) VALUES ('Shilpa', 22, 'B')")
cursor.execute("INSERT INTO students (name, age, grade) VALUES ('Uma', 21, 'C')")

# Commit the transaction
connection.commit()

# Read and display data from the table
print("Students in the database:")
cursor.execute("SELECT * FROM students")
for row in cursor.fetchall():
    print(row)

# Update a record
cursor.execute("UPDATE students SET grade = 'A+' WHERE name = 'Silpa'")
connection.commit()

# Delete a record
cursor.execute("DELETE FROM students WHERE name = 'Uma'")
connection.commit()

# Show updated data
print("\nUpdated Students list:")
cursor.execute("SELECT * FROM students")
for row in cursor.fetchall():
    print(row)

# Close the connection
connection.close()

"""**Experiment 9:** Object-Relational Mapping (ORM) in Python

**Program:**
"""

# Experiment: ORM in Python using SQLAlchemy
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import declarative_base, sessionmaker

# Define the database URL (SQLite in this case)
DATABASE_URL = "sqlite:///students.db"

# Create engine and base
engine = create_engine(DATABASE_URL, echo=True)
Base = declarative_base()

# Define the ORM class mapped to the "students" table
class Student(Base):
    __tablename__ = 'students'

    id = Column(Integer, primary_key=True)
    name = Column(String)
    age = Column(Integer)
    grade = Column(String)

    def __repr__(self):
        return f"<Student(name='{self.name}', age={self.age}, grade='{self.grade}')>"

# Create the table in the database
Base.metadata.create_all(engine)

# Create a session
Session = sessionmaker(bind=engine)
session = Session()

# -----------------------------
# 1. Insert data into the table
student1 = Student(name="Alice", age=20, grade="A")
student2 = Student(name="Bob", age=22, grade="B")
student3 = Student(name="Charlie", age=21, grade="C")

session.add_all([student1, student2, student3])
session.commit()
print("Data inserted successfully!")

# -----------------------------
# 2. Read and display all data from the table
print("\nStudents in the database:")
students = session.query(Student).all()
for student in students:
    print(student)

# -----------------------------
# 3. Update a record
student_to_update = session.query(Student).filter_by(name="Bob").first()
if student_to_update:
    student_to_update.grade = "A+"
    session.commit()
    print("\nRecord updated successfully!")

# -----------------------------
# 4. Delete a record
student_to_delete = session.query(Student).filter_by(name="Charlie").first()
if student_to_delete:
    session.delete(student_to_delete)
    session.commit()
    print("\nRecord deleted successfully!")

# -----------------------------
# 5. Display updated data
print("\nUpdated Students list:")
updated_students = session.query(Student).all()
for student in updated_students:
    print(student)

# Close the session
session.close()

"""**Experiment 10:** Case Study Implementation

**Go to the below link and perform the case study given here.**

**Create your own repository on GitHub and share the repository link in the book
and write down the code.**

**https://www.kaggle.com/code/devraai/temperature-data-analysis-prediction**

**ðŸš€ Experiment 10: Case Study Implementation - Temperature Data Analysis and Prediction**

**ðŸ“š Objective:
Analyze and predict temperature data using Python.
Implement data analysis, visualization, and prediction models.
Upload and share the project on GitHub.**

**ðŸŽ¯ Step 1: Set Up Project and Environment**

**âœ… Required Libraries:**
"""

# Install necessary packages
pip install pandas numpy matplotlib seaborn scikit-learn

"""**ðŸ“š Step 2: Code Implementation**"""

# Experiment 10: Temperature Data Analysis and Prediction
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset (replace with correct path or URL if needed)
url = "https://raw.githubusercontent.com/datasets/global-temp/master/data/monthly.csv"
data = pd.read_csv(url)

# Display basic information about the dataset
print("Dataset Info:")
print(data.info())

# Display first few rows
print("\nFirst 5 Rows:")
print(data.head())

# -----------------------------
# Data Preprocessing
data['Date'] = pd.to_datetime(data['Date'])
data['Year'] = data['Date'].dt.year
data['Month'] = data['Date'].dt.month

# Check for missing values
print("\nMissing Values:")
print(data.isnull().sum())

# -----------------------------
# Data Visualization
plt.figure(figsize=(12, 6))
sns.lineplot(x='Date', y='Mean', data=data, label="Global Mean Temperature")
plt.title('Global Mean Temperature Over Time')
plt.xlabel('Year')
plt.ylabel('Mean Temperature (Â°C)')
plt.legend()
plt.show()

# -----------------------------
# Feature Selection and Split
data = data.dropna(subset=['Mean'])
X = data[['Year', 'Month']]
y = data['Mean']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# -----------------------------
# Model Training - Linear Regression
model = LinearRegression()
model.fit(X_train, y_train)

# -----------------------------
# Model Evaluation
y_pred = model.predict(X_test)
print("\nModel Evaluation:")
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred):.4f}")
print(f"R-squared: {r2_score(y_test, y_pred):.4f}")

# -----------------------------
# Predict Future Temperatures
future_years = np.array(range(2025, 2031))
future_data = pd.DataFrame({'Year': np.repeat(future_years, 12), 'Month': list(range(1, 13)) * len(future_years)})
future_data['Predicted_Temp'] = model.predict(future_data[['Year', 'Month']])

# Plot predicted values
plt.figure(figsize=(12, 6))
sns.lineplot(x=future_data['Year'] + future_data['Month'] / 12, y=future_data['Predicted_Temp'], label="Predicted Temp")
plt.title('Future Temperature Predictions')
plt.xlabel('Year')
plt.ylabel('Predicted Temperature (Â°C)')
plt.legend()
plt.show()

print("\nFuture Predictions:")
print(future_data[['Year', 'Month', 'Predicted_Temp']].head(12))

"""**ðŸ“Š Explanation:**

1. Data Loading: Loads temperature data from the provided URL.
2. Data Preprocessing: Converts date to datetime format, extracts year and month.
3. Visualization: Plots global mean temperature over time.
4. Model Training: Uses LinearRegression to predict future temperatures.
5. Model Evaluation: Calculates Mean Squared Error (MSE) and R-squared values.
Future Prediction: Predicts temperatures for 2025-2030.

**ðŸ§ª Sample Output:**
"""

Dataset Info:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 3191 entries, 0 to 3190
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype
---  ------  --------------  -----
 0   Date    3191 non-null   object
 1   Mean    3191 non-null   float64
dtypes: float64(1), object(1)
memory usage: 50.0+ KB

First 5 Rows:
         Date  Mean
0  1850-01-01 -0.26
1  1850-02-01 -0.23
2  1850-03-01 -0.10
3  1850-04-01 -0.06
4  1850-05-01 -0.05

Missing Values:
Date    0
Mean    0
dtype: int64

Model Evaluation:
Mean Squared Error: 0.0084
R-squared: 0.8517

Future Predictions:
   Year  Month  Predicted_Temp
0  2025      1         1.21
1  2025      2         1.22
2  2025      3         1.24
3  2025      4         1.25
4  2025      5         1.27

"""**ðŸ“‚ Step 3: Create and Upload to GitHub**

**âœ… Steps to Create a GitHub Repository:**

1. Go to GitHub.
2. Click on New Repository.
3. Name your repository as temperature-analysis.
4. Choose visibility (Public or Private).
4. Initialize with a README.md.
5. Click Create Repository.

**âœ… Steps to Push Code to GitHub:**
"""

# Initialize a Git repository
git init

# Add files to the repository
git add .

# Commit the changes
git commit -m "Initial commit - Temperature Analysis"

# Add GitHub remote repository (replace with your repo link)
git remote add origin https://github.com/yourusername/temperature-analysis.git

# Push changes to GitHub
git branch -M main
git push -u origin main

"""**ðŸ”— Step 4: Share Repository Link**

Add the GitHub repository link in your documentation or report.

**âœ… Task:**

1. Implement the code provided.
2. Push the code to your GitHub repository.
3. Share the repository link.
4. Let me know if you encounter any issues or need assistance! ðŸ˜Š

**Adv. Python Lab_Manual M.Sc(CS/IT)**
**Completed the Practical............!!!!**
"""